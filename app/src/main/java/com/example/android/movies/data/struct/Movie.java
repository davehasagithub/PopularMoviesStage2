package com.example.android.movies.data.struct;

import android.arch.persistence.room.Entity;
import android.arch.persistence.room.Ignore;
import android.arch.persistence.room.PrimaryKey;
import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.v4.util.ObjectsCompat;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.style.RelativeSizeSpan;

import com.example.android.movies.R;

import java.util.Date;

@Entity(tableName = "favoriteMovies")
public class Movie implements Parcelable, Cloneable {
    @PrimaryKey
    private int id;
    private String posterPath;
    private String overview;
    private String releaseDate;
    private String originalTitle;
    private String title;
    private double voteAverage;
    private int votePercentage;
    private Date favoritedDate;

    @Ignore
    private boolean favorite;

    public Movie cloneMovie() {
        Movie movie = new Movie();
        movie.id = id;
        movie.posterPath = posterPath;
        movie.overview = overview;
        movie.releaseDate = releaseDate;
        movie.originalTitle = originalTitle;
        movie.title = title;
        movie.voteAverage = voteAverage;
        movie.votePercentage = (int) Math.round(voteAverage * 10);
        movie.favoritedDate = favoritedDate;
        movie.favorite = favorite;
        return movie;
    }

    public Movie(int id, String posterPath, String overview, String releaseDate, String originalTitle, String title, double voteAverage) {
        this.id = id;
        this.posterPath = posterPath;
        this.overview = overview;
        this.releaseDate = releaseDate;
        this.originalTitle = originalTitle;
        this.title = title;
        this.voteAverage = voteAverage;
        this.votePercentage = (int) Math.round(voteAverage * 10);
    }

    private Movie() {
    }

    private static SpannableString constructRatingSpannable(Movie movie) {
        // ie: 5.0 / 10 (50%)
        StringBuilder voteAverageDescription = new StringBuilder();
        voteAverageDescription
                .append(movie.getVoteAverage())
                .append(" / 10 (")
                .append(movie.getVotePercentage())
                .append("%)");

        // make everything after vote average a bit smaller
        SpannableString ratingSpannable = new SpannableString(voteAverageDescription);
        ratingSpannable.setSpan(new RelativeSizeSpan(0.60f), voteAverageDescription.indexOf(" "), voteAverageDescription.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

        return ratingSpannable;
    }

    public static String getStringOrNotAvailable(Context context, String s) {
        return TextUtils.isEmpty(s) ? context.getString(R.string.not_unavailable) : s;
    }

    public String getOriginalTitleTextInParens(Context context) {
        return context.getString(R.string.inside_parens, getOriginalTitle());
    }

    public String getReleaseDateText(Context context) {
        return getStringOrNotAvailable(context, getReleaseDate());
    }

    public String getOverviewText(Context context) {
        return getStringOrNotAvailable(context, getOverview());
    }

    public SpannableString getRatingSpannable() {
        return constructRatingSpannable(this);
    }

    public boolean shouldShowOriginalTitle() {
        return (getTitle() != null && !getTitle().equals(getOriginalTitle()));
    }

    // autogenerated parcelable and getter/equals/hashcode methods using android studio

    protected Movie(Parcel in) {
        id = in.readInt();
        posterPath = in.readString();
        overview = in.readString();
        releaseDate = in.readString();
        originalTitle = in.readString();
        title = in.readString();
        voteAverage = in.readDouble();
        votePercentage = in.readInt();
        favorite = in.readByte() != 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(id);
        dest.writeString(posterPath);
        dest.writeString(overview);
        dest.writeString(releaseDate);
        dest.writeString(originalTitle);
        dest.writeString(title);
        dest.writeDouble(voteAverage);
        dest.writeInt(votePercentage);
        dest.writeByte((byte) (favorite ? 1 : 0));
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<Movie> CREATOR = new Creator<Movie>() {
        @Override
        public Movie createFromParcel(Parcel in) {
            return new Movie(in);
        }

        @Override
        public Movie[] newArray(int size) {
            return new Movie[size];
        }
    };

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Movie movie = (Movie) o;
        return id == movie.id &&
                Double.compare(movie.voteAverage, voteAverage) == 0 &&
                votePercentage == movie.votePercentage &&
                favorite == movie.favorite &&
                ObjectsCompat.equals(posterPath, movie.posterPath) &&
                ObjectsCompat.equals(overview, movie.overview) &&
                ObjectsCompat.equals(releaseDate, movie.releaseDate) &&
                ObjectsCompat.equals(originalTitle, movie.originalTitle) &&
                ObjectsCompat.equals(title, movie.title) &&
                ObjectsCompat.equals(favoritedDate, movie.favoritedDate);
    }

    @Override
    public int hashCode() {
        return ObjectsCompat.hash(id, posterPath, overview, releaseDate, originalTitle, title, voteAverage, votePercentage, favoritedDate, favorite);
    }

    public int getId() {
        return id;
    }

    public String getPosterPath() {
        return posterPath;
    }

    @SuppressWarnings("WeakerAccess")
    public String getOverview() {
        return overview;
    }

    @SuppressWarnings("WeakerAccess")
    public String getReleaseDate() {
        return releaseDate;
    }

    @SuppressWarnings("WeakerAccess")
    public String getOriginalTitle() {
        return originalTitle;
    }

    public String getTitle() {
        return title;
    }

    @SuppressWarnings("WeakerAccess")
    public double getVoteAverage() {
        return voteAverage;
    }

    @SuppressWarnings("WeakerAccess")
    public int getVotePercentage() {
        return votePercentage;
    }

    public void setVotePercentage(int votePercentage) {
        this.votePercentage = votePercentage;
    }

    public Date getFavoritedDate() {
        return favoritedDate;
    }

    public void setFavoritedDate(Date favoritedDate) {
        this.favoritedDate = favoritedDate;
    }

    public boolean isFavorite() {
        return favorite;
    }

    public void setFavorite(boolean favorite) {
        this.favorite = favorite;
    }
}
